{"version":3,"sources":["components/Landing.jsx","components/playerlist.jsx","components/lobby.jsx","App.jsx","index.jsx"],"names":["withRouter","props","name","code","useState","modalShow","setModalShow","modalShow1","setModalShow1","React","modalShow2","setModalShow2","MyVerticallyCenteredModal","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Footer","Button","onClick","onHide","RenderJoin","Form","Group","controlId","Label","Control","onChange","e","console","log","target","value","variant","onClickjoin","RenderCreate","Text","className","createGame","a","axios","get","new_code","history","push","data","preventDefault","Grid","container","justify","alignItems","spacing","Container","Row","Col","sm","offset","span","xs","classname","show","useStyles","makeStyles","theme","root","flexGrow","paper","height","width","control","padding","SpacingGrid","classes","gridshow","scores","length","item","Paper","direction","players","map","player","index","key","createMuiTheme","typography","h3","fontSize","breakpoints","up","down","textAlign","useTimer","initialTime","time","start","reset","pause","isRunning","setName","room","setRoom","currentSocket","setCurrentSocket","setPlayers","score_array","setscore_array","count","setCount","setShow","setshowscores","host","setHost","grid","setGrid","setGShow","showgrid","setshowgrid","endgame","setEndgame","words","setWords","endtime","setendtime","final_time","minlength","setminlength","min","isBlocking","useEffect","queryString","parse","window","location","search","socket","io","emit","on","players_list","min_length","undefined","order_scores","onpopstate","off","submit_data","no_of_players","i","total_score1","sort","b","pwords","score","word","fixed","ThemeProvider","Typography","leaderboard","OverlayTrigger","trigger","triger","placement","overlay","Popover","as","Content","common","class","src","alt","total_score","display_scores","display_grid","placeholder","rows","cols","show_text","htmlFor","srOnly","custom","when","message","App","exact","path","render","Component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3b21d11.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./landing.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\n//import Modal from 'react-bootstrap/Modal'\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Popover from \"react-bootstrap/Popover\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\n//this component will set up the landing page\r\n\r\nconst Landing = (props) => {\r\n  //variables in landing\r\n  let name = \"\";\r\n  // const [name, setName] = useState(\"\");\r\n  let code = \"\";\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [modalShow1, setModalShow1] = useState(false);\r\n  const SERVER_PORT = \"https://backend-boggle.herokuapp.com\";\r\n  // const SERVER_PORT = `http://localhost:9000`;\r\n  const [modalShow2, setModalShow2] = React.useState(false);\r\n\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          How To Play\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <div>\r\n  <li>1. create a game and share the given code with your friends</li>\r\n  <li>2. once everyone has joined the game the host can set the game length and the minimum word length</li>\r\n  <li>3. once all the players have joined the room start the game</li>\r\n  <li>4. find words if they are connected by adjacent or diagonal letters</li>\r\n  <li>5. When the time is completed, the leaderboard will show who won!</li>\r\n</div> \r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  function RenderJoin(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Join game\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                onChange={(e) => {\r\n                  console.log(name);\r\n                  name = e.target.value;\r\n                }}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n              <Form.Label>Game Code</Form.Label>\r\n              <Form.Control\r\n                onChange={(e) => {\r\n                  console.log(code);\r\n                  code = e.target.value;\r\n                }}\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"success\" onClick={onClickjoin}>\r\n              Join Game\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={() => setModalShow(false)}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  function RenderCreate(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Create Game\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                onChange={(e) => {\r\n                  name = e.target.value;\r\n                }}\r\n              />\r\n              <Form.Text className=\"text-muted\"></Form.Text>\r\n            </Form.Group>\r\n            <Button onClick={onClick}>Create Game</Button>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  const createGame = async () => {\r\n    if (name !== \"\") {\r\n      const new_code = await axios.get(`${SERVER_PORT}/rooms/new`);\r\n      console.log(new_code);\r\n      if (new_code !== \"\") {\r\n        props.history.push(`/lobby?name=${name}&room=${new_code.data}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  const joinGame = () => {\r\n    if (code !== \"\") {\r\n      props.history.push(`/lobby?name=${name}&room=${code}`);\r\n    }\r\n  };\r\n\r\n  const onClickjoin = (e) => {\r\n    joinGame();\r\n    e.preventDefault();\r\n  };\r\n\r\n  const onClick = (e) => {\r\n    createGame();\r\n    if (code === \"\") {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      className=\"body\"\r\n      container\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={1}\r\n    >\r\n      <Container>\r\n   \r\n        <Row>\r\n          <Col sm={{ offset: 4, span: 4 }}  xs={{ offset: 2, span: 9 }}>\r\n            {\" \"}\r\n            <h1 classname=\"header\">Online Boggle!!</h1>\r\n          </Col>\r\n       \r\n        </Row>\r\n        <br/>\r\n        <Row>\r\n          <Col xs={4}>\r\n            {\" \"}\r\n            <Button onClick={() => setModalShow(true)} className=\"myButton\">\r\n              Join Game\r\n            </Button>\r\n          </Col>\r\n         \r\n          <Col xs={4}>\r\n            {\" \"}\r\n            <Button onClick={() => setModalShow2(true)} className=\"myButton\">\r\n              Instructions\r\n            </Button>\r\n          </Col>\r\n       \r\n          <Col xs={4}>\r\n            {\" \"}\r\n            <Button onClick={() => setModalShow1(true)} className=\"myButton\">\r\n              Create Game\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        \r\n      </Container>\r\n\r\n      <RenderJoin show={modalShow} onHide={() => setModalShow(false)} />\r\n      <RenderCreate show={modalShow1} onHide={() => setModalShow1(false)} />\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow2}\r\n        onHide={() => setModalShow2(false)}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withRouter(Landing);\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        height: 100,\r\n        width: 400,\r\n    },\r\n    control: {\r\n        padding: theme.spacing(),\r\n    },\r\n}));\r\n\r\nexport default function SpacingGrid(props) {\r\n    const [spacing, setSpacing] = React.useState(2);\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (event) => {\r\n        setSpacing(Number(event.target.value));\r\n    };\r\nif(!props.gridshow && props.scores.length === 0){\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Paper className={classes.paper}>\r\n                <Grid container justify=\"center\"\r\n                   >\r\n                       <h6>Players</h6>\r\n                    <Grid item container\r\n                        direction=\"row\"\r\n                        justify=\"space-evenly\"\r\n                        alignItems=\"center\">\r\n                        {props.players.map((player, index) => (\r\n                            <Grid key={index} item>\r\n                                <div>{player.name}</div>\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <br/>\r\n        </Grid>\r\n    );\r\n}\r\nreturn null\r\n}\r\n\r\n\r\n// const leaderboard = () => {\r\n//     return (\r\n//       <ThemeProvider theme={theme}>\r\n//         <Typography variant=\"h3\">\r\n//           <strong>{scores.length > 0 ? <h3>Leaderboard!!!</h3> : \"\"}</strong>\r\n//         </Typography>\r\n//       </ThemeProvider>\r\n//     );\r\n//   };","import React, { useState, useEffect } from \"react\";\r\nimport queryString from \"query-string\";\r\nimport io from \"socket.io-client\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { useTimer } from \"use-timer\";\r\nimport SpacingGrid from \"./playerlist.jsx\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Popover from \"react-bootstrap/Popover\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Prompt\r\n} from \"react-router-dom\";\r\nimport \"./lobby.css\";\r\n\r\n\r\n\r\n\r\nconst theme = createMuiTheme();\r\n\r\ntheme.typography.h3 = {\r\n  fontSize: \"1.2rem\",\r\n  \"@media (min-width:600px)\": {\r\n    fontSize: \"1.5rem\",\r\n  },\r\n  [theme.breakpoints.up(\"md\")]: {\r\n    fontSize: \"2rem\",\r\n  },\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(5),\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      height: 20,\r\n      width: 5,\r\n      padding: theme.spacing(4),\r\n      textAlign: \"center\",\r\n    },\r\n    height: 120,\r\n    width: 100,\r\n    textAlign: \"center\",\r\n  },\r\n  control: {\r\n    padding: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nlet scores = [];\r\n\r\nconst Lobby = (props) => {\r\n  //DECLARATIONS OF STATE NECESSARY THINGS\r\n\r\n  const { time, start, pause, reset, isRunning } = useTimer({\r\n    initialTime: 0,\r\n  });\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [room, setRoom] = useState(\"\");\r\n  const [currentSocket, setCurrentSocket] = useState(null);\r\n  const [players, setPlayers] = useState([]);\r\n  const [score_array, setscore_array] = useState([]);\r\n  const [count, setCount] = useState(0);\r\n  const [show, setShow] = useState(false);\r\n  const [showscores, setshowscores] = useState(true);\r\n  const [host, setHost] = useState(\"\");\r\n  const [grid, setGrid] = useState([]);\r\n  const [gridshow, setGShow] = useState(false);\r\n  const [showgrid, setshowgrid] = useState(false);\r\n  const [endgame, setEndgame] = useState(false);\r\n  const [words, setWords] = useState(\"\");\r\n  const [endtime, setendtime]  = useState(20);\r\n  let final_time = 120;\r\n   const ENDPOINT = `https://backend-boggle.herokuapp.com/rooms`;\r\n  // const ENDPOINT = `http://localhost:9000/rooms`;\r\n  const classes = useStyles();\r\n  const [minlength, setminlength] = useState(3);\r\n  let min = 3;\r\n  let [isBlocking, setIsBlocking] = useState(true);\r\n  \r\n\r\n\r\n  //Use Effect renders\r\n  useEffect(() => {\r\n    let { name, room } = queryString.parse(window.location.search);\r\n    console.log(queryString.parse(window.location.search));\r\n    setName(name);\r\n    setRoom(room);\r\n\r\n    const socket = io(`${ENDPOINT}/${room}`);\r\n    setCurrentSocket(socket);\r\n\r\n    socket.emit(\"add_player\", name);\r\n\r\n    socket.on(\"add_to_list\", (players_list) => {\r\n      console.log(players_list);\r\n      setPlayers(players_list);\r\n    });\r\n\r\n    socket.on(\"host\", (host) => {\r\n      console.log(\"getting called\");\r\n      console.log(host);\r\n      setHost(host);\r\n    });\r\n\r\n   socket.on(\"sending_time\", (time) => {\r\n      console.log('getting called')\r\n      console.log(time);\r\n      setendtime(time);\r\n    });\r\n\r\n    socket.on(\"getmin_length\", (min_length) => {\r\n      console.log('getting called')\r\n      console.log(min_length);\r\n      setminlength(min_length)\r\n    });\r\n\r\n\r\n   \r\n    socket.on(\"starting_game\", (data) => {\r\n      if (data.start) {\r\n        console.log('game is starting')\r\n        console.log(data.start)\r\n        setGrid(data.grid);\r\n        setGShow(data.start);\r\n        setshowgrid(false);\r\n        scores = []\r\n        setWords(\"\")\r\n        setscore_array([])\r\n        reset();\r\n        start();\r\n        setCount(0);\r\n      }\r\n    });\r\n\r\n    socket.on(\"sending scores\", (data) => {\r\n      //console.log('I am getting called')\r\n      console.log(data.players);\r\n      if (data.players !== undefined) {\r\n        console.log(\"data.players not undefined\")\r\n        scores = data.players;\r\n        console.log(scores)\r\n        setshowscores(true);\r\n      }\r\n      order_scores(scores);\r\n    });\r\n\r\n    window.onpopstate = e => {\r\n      setGShow(false)\r\n      socket.emit(\"disconnect\", name);\r\n      socket.off();\r\n    }\r\n\r\n    return () => {\r\n      socket.emit(\"disconnect\", name);\r\n      socket.off();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (time >= endtime && count === 0) {\r\n     console.log('happening')\r\n      setEndgame(true);\r\n      setGShow(false);\r\n      submit_data();\r\n      setCount(1);\r\n    }\r\n    if(players.length > 0){\r\n    currentSocket.on(\"sending_time\", (time) => {\r\n      console.log('getting called')\r\n      console.log(time);\r\n      setendtime(time);\r\n      console.log(endtime);\r\n    });\r\n  }\r\n  }, [time]);\r\n\r\n\r\n\r\n  //STARTS THE GAME\r\n  const StartGame = (msg) => {\r\n    console.log(name);\r\n    console.log(\"I am getting called\");\r\n    currentSocket.emit(\"start game\", name);\r\n  };\r\n  //Submits data when game is over\r\n  const submit_data = () => {\r\n    currentSocket.emit(\"Words\", {\r\n      name: name,\r\n      words: words,\r\n      no_of_players: players.length,\r\n    });\r\n    currentSocket.emit(\"get_scores\", () => {\r\n      console.log(\"I am getting called\");\r\n    });\r\n  };\r\n\r\n  const order_scores = () => {\r\n    score_array.length = 0;\r\n    for (let i = 0; i < scores.length; i++) {\r\n      console.log(score_array);\r\n      score_array.push(total_score1(scores[i].words));\r\n    }\r\n    score_array.sort(function (a, b) {\r\n      setShow(true)\r\n      return b - a;\r\n    });\r\n    setscore_array(score_array)\r\n    console.log(score_array);\r\n  };\r\n\r\n  const total_score1 = (pwords) => {\r\n    if (pwords !== undefined) {\r\n      if (pwords.length !== 0) {\r\n        var score = 0;\r\n        pwords.map((word) => {\r\n          score += word.score;\r\n        });\r\n        return score;\r\n      }\r\n    }\r\n  }\r\n\r\n  const total_score = (pwords) => {\r\n    if (pwords !== undefined) {\r\n      if (pwords.length !== 0) {\r\n        var score = 0;\r\n        pwords.map((word) => {\r\n          score += word.score;\r\n        });\r\n        return (\r\n          <div>\r\n            {\" \"}\r\n            <h6> total score : {score}</h6>{\" \"}\r\n            {score === score_array[0] ? (\r\n              <div>\r\n                <img src=\"https://img.icons8.com/ios-filled/100/000000/medal2.png\" />\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {score === score_array[1] && score !== score_array[0] ? (\r\n              <img\r\n                src=\"https://img.icons8.com/ios-filled/100/000000/medal-second-place.png\"\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {score === score_array[2] && score !== score_array[1] ? (\r\n             <img src=\"https://img.icons8.com/ios-filled/100/000000/medal2-third-place.png\"/>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const leaderboard = () => {\r\n   if(scores.length > 0){\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Typography variant=\"h3\">\r\n            <strong>\r\n              <h3>Leaderboard</h3>{\" \"}\r\n            </strong>\r\n        </Typography>\r\n      </ThemeProvider>\r\n    );\r\n          }\r\n  };\r\n\r\n  //DISPLAYS SCORES\r\n  const display_scores = () => {\r\n    if (gridshow === false && scores.length > 0) {\r\n      //console.log(score_array)\r\n      return (\r\n        <div>\r\n          <Grid container>\r\n            <Grid item xs={12}>\r\n              <br/>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-evenly\"\r\n                alignItems=\"center\"\r\n                spacing={4}\r\n              >\r\n                {scores.map((player) => (\r\n                  <li>\r\n                    <OverlayTrigger\r\n                    trigger=\"hover\"\r\n                    triger= \"focus\"\r\n                    \r\n                      \r\n                      placement=\"bottom\"\r\n                      overlay={\r\n                        <Popover id=\"popover-basic\">\r\n                          <Popover.Title as=\"h3\">Word List</Popover.Title>\r\n                          <Popover.Content>\r\n                            <Grid\r\n                              container\r\n                              direction=\"column\"\r\n                              justify=\"center\"\r\n                              alignItems=\"center\"\r\n                              spacing={0}\r\n                            >\r\n                              {player.words.map((word) => (\r\n                                <Grid key={word.word} item>\r\n                                  <h6>\r\n                                    {word.word !== \"\" && word.common == true\r\n                                      ? <div class=\"container\"><span className=\"strikethrough\">{word.word} - {0}</span></div>\r\n                                      : \"\"}\r\n                                       {word.word !== \"\" && word.common == false\r\n                                      ? <div class=\"container\">{word.word} - {word.score}</div>\r\n                                      : \"\"}\r\n                                  </h6>\r\n                                </Grid>\r\n                              ))}\r\n                              (tap note to show and hide list)\r\n                            </Grid>\r\n                          </Popover.Content>\r\n                        </Popover>\r\n                      }\r\n                    >\r\n                      <a>\r\n                        <ThemeProvider theme={theme}>\r\n                          <Typography variant=\"h3\">{player.name}</Typography>\r\n                        </ThemeProvider>\r\n                        <h3>{total_score(player.words)}</h3>\r\n                      </a>\r\n                    </OverlayTrigger>\r\n                  </li>\r\n                ))}\r\n                 <Button variant='success' onClick={(e)=>{setshowgrid(!showgrid)}}>See board</Button>\r\n              </Grid>\r\n            </Grid>\r\n           <br/>\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  //RENDER FUNCTIONS\r\n  const display_grid = () => {\r\n    //console.log(grid[0])\r\n    if (gridshow === true || showgrid === true) {\r\n      return (\r\n        <div className=\"background\">\r\n          {\" \"}\r\n          <Grid container className={classes.root} spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Grid container justify=\"center\" spacing={4}>\r\n                {[0, 1, 2, 3].map((value) => (\r\n                  <Grid key={value} item xs={3}>\r\n                    <Paper className={classes.paper}>\r\n                      {\" \"}\r\n                      <ThemeProvider theme={theme}>\r\n                        <Typography variant=\"h3\">{grid[value]}</Typography>\r\n                      </ThemeProvider>\r\n                    </Paper>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container className={classes.root} spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Grid container justify=\"center\" spacing={4}>\r\n                {[4, 5, 6, 7].map((value) => (\r\n                  <Grid key={value} item xs={3}>\r\n                    <Paper className={classes.paper}>\r\n                      {\" \"}\r\n                      <ThemeProvider theme={theme}>\r\n                        <Typography variant=\"h3\">{grid[value]}</Typography>\r\n                      </ThemeProvider>\r\n                    </Paper>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container className={classes.root} spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Grid container justify=\"center\" spacing={4}>\r\n                {[8, 9, 10, 11].map((value) => (\r\n                  <Grid key={value} item xs={3}>\r\n                    <Paper className={classes.paper}>\r\n                      {\" \"}\r\n                      <ThemeProvider theme={theme}>\r\n                        <Typography variant=\"h3\">{grid[value]}</Typography>\r\n                      </ThemeProvider>\r\n                    </Paper>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container className={classes.root} spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Grid container justify=\"center\" spacing={4}>\r\n                {[12, 13, 14, 15].map((value) => (\r\n                  <Grid key={value} item xs={3}>\r\n                    <Paper className={classes.paper}>\r\n                      {\" \"}\r\n                      <ThemeProvider theme={theme}>\r\n                        <Typography variant=\"h3\">{grid[value]}</Typography>\r\n                      </ThemeProvider>\r\n                    </Paper>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  const render_timer = () => {\r\n    if (gridshow) {\r\n      return (\r\n        <ThemeProvider theme={theme}>\r\n          <Typography variant=\"h3\">\r\n            Find Words!! Seconds Left: {endtime - time}\r\n          </Typography>\r\n          minimum word length = {minlength}\r\n        </ThemeProvider>\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const text_area = () => {\r\n    return (\r\n      <Form>\r\n        <Form.Group>\r\n          <div className=\"text-container\">\r\n            <textarea\r\n              className=\"my_text_area\"\r\n              onChange={(e) => {\r\n                setWords(e.target.value);\r\n              }}\r\n              placeholder={`              type words here. \r\n              min-length=${minlength}.\r\n              (space between words)`}\r\n              rows=\"100\"\r\n              cols=\"20\"\r\n            ></textarea>\r\n          </div>\r\n        </Form.Group>\r\n      </Form>\r\n    );\r\n  };\r\n\r\n  const show_text = () => {\r\n    if (gridshow === true) {\r\n      return (\r\n        <div>\r\n          <div id=\"paper\">\r\n            <div id=\"pattern\">\r\n              <div id=\"content\">\r\n                {text_area()}\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                (Words will automatically submit)\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const render_code = () => {\r\n    if (!gridshow && scores.length === 0) {\r\n      return (\r\n        <div>\r\n          <ThemeProvider theme={theme}>\r\n            <Typography variant=\"h3\">\r\n              <strong>\r\n                {\" \"}\r\n                {`${host}'s room`} Code: {room}\r\n              </strong>\r\n            </Typography>\r\n          </ThemeProvider>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n     {leaderboard()}\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"lobby\">\r\n    <Container fixed>\r\n      <Grid item xs={12}>\r\n        <Grid container justify=\"center\" spacing={4}>\r\n          <Grid item>{render_code()}</Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid>\r\n        {display_scores()}\r\n      </Grid>\r\n\r\n      <Grid container>\r\n      <Grid item xs={12}>\r\n          <Grid\r\n            container\r\n            direction=\"row-reverse\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={0}\r\n          >\r\n            <Grid item>{render_timer()}</Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item sm={8} xs={12}>\r\n          <Grid\r\n            container\r\n            direction=\"row-reverse\"\r\n            justify=\"space-evenly\"\r\n            alignItems=\"center\"\r\n            spacing={0}\r\n          >\r\n            <Grid item>{display_grid()}</Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item sm={4} xs={12}>\r\n          <Grid\r\n            container\r\n            direction=\"row-reverse\"\r\n            justify=\"space-evenly\"\r\n            alignItems=\"center\"\r\n            spacing={0}\r\n          >\r\n            <Grid item>{show_text()}</Grid>\r\n          </Grid>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12}>\r\n          <Grid\r\n            container\r\n            direction=\"row-reverse\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={3}\r\n          >\r\n            <Grid item>\r\n              <br/>\r\n              <SpacingGrid\r\n                players={players}\r\n                gridshow={gridshow}\r\n                scores={scores}\r\n              ></SpacingGrid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item sm={6} xs={12}>\r\n          <Grid\r\n            container\r\n            direction=\"row-reverse\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={0}\r\n          >\r\n            <Grid item>\r\n              {gridshow === false ? (\r\n                <div>\r\n                  <Button\r\n                    onClick={(e) => {\r\n                      StartGame(e);\r\n                    }}\r\n                  >\r\n                    {endgame === true ? \"play again\" : \"start game\"}\r\n                  </Button>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item sm={6} xs={12}>\r\n          <Grid\r\n            container\r\n            direction=\"row-reverse\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={1}\r\n          >\r\n            <Grid item>\r\n              {gridshow === false ? (\r\n                <div>\r\n                  <Form>\r\n                    <Form.Row className=\"align-items-center\">\r\n                      <Col xs={6} className=\"my-1\">\r\n                        <Form.Label\r\n                          className=\"mr-sm-2\"\r\n                          htmlFor=\"inlineFormCustomSelect\"\r\n                          srOnly\r\n                        >\r\n                          Preference\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                       onChange= {(e) => {\r\n                      final_time = e.target.value\r\n                        console.log(final_time)\r\n    currentSocket.emit('setting_time', ({host: name, time: final_time}))\r\n                      }}\r\n                          as=\"select\"\r\n                          className=\"mr-sm-2\"\r\n                          id=\"inlineFormCustomSelect\"\r\n                          custom\r\n                        >\r\n                          <option value=\"20\">Time</option>\r\n                          <option value=\"60\">60s</option>\r\n                          <option value=\"120\">120s</option>\r\n                          <option value=\"180\">180s</option>\r\n                        </Form.Control>\r\n                      </Col>\r\n                      <Col xs={6} className=\"my-1\">\r\n                      <Form.Control\r\n                       onChange= {(e) => {\r\n                        min = e.target.value\r\n                        console.log(min)\r\n    currentSocket.emit('min_length', ({host: name, min_length: min}))\r\n                      }}\r\n                          as=\"select\"\r\n                          className=\"mr-sm-2\"\r\n                          id=\"inlineFormCustomSelect\"\r\n                          custom\r\n                        >\r\n                          <option value=\"3\">min length (default 3)</option>\r\n                          <option value=\"3\">3</option>\r\n                          <option value=\"4\">4</option>\r\n                          <option value=\"5\">5</option>\r\n                        </Form.Control>\r\n                        </Col>\r\n                    </Form.Row>\r\n                  </Form>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n\r\n      </Grid>\r\n      <Prompt\r\n        when={isBlocking}\r\n        message={location =>\r\n          `Are you sure you want to leave this page`\r\n        }\r\n      />\r\n    </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Lobby);\r\n\r\n/*<div>\r\n<div>\r\n    <h1>Code: {room}</h1>\r\n</div>\r\n<div>\r\n{players.map(function(d, idx){\r\n return (<li key={idx}>{d.name}</li>)\r\n})}\r\n</div>\r\n{display_grid()}\r\n</div>*/\r\n\r\n/*\r\n<div>\r\n            <div><Example /></div>\r\n\r\n            <div>\r\n                <h1>Code: {room}</h1>\r\n            </div>\r\n\r\n            <div>\r\n                {render_players()}\r\n            </div>\r\n\r\n            <div>\r\n                <Button onClick={(e) => {\r\n                    StartGame(e)\r\n                }}>start game</Button>\r\n                {display_grid()}\r\n            </div>\r\n\r\n            <div>\r\n\r\n            </div>\r\n\r\n            <div>\r\n            {render_timer()}\r\n        </div>\r\n\r\n        </div>*/\r\n\r\n//   <Grid\r\n//   container\r\n//   direction=\"column\"\r\n//   justify=\"flex-start\"\r\n//   alignItems=\"center\"\r\n//   spacing={2}\r\n// >\r\n//   {player.words.map((word) => (\r\n//     <Grid key={word.word} item>\r\n//       <h6>\r\n//         {word.word !== \"\" ? `${word.word} - ${word.score}` : \"\"}\r\n//       </h6>\r\n//     </Grid>\r\n//   ))}\r\n//   <h6>{total_score(player.words)}</h6>\r\n// </Grid>\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Landing from \"./components/Landing\"\r\nimport Lobby from \"./components/lobby\"\r\n//import Create from \"./components/Create\";\r\n//import Game from \"./components/Game\";\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path='/' render={props => <Landing {...props} />} />\r\n          <Route path= '/lobby' render={props => <Lobby {...props} />} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n// <Route path='/rooms/:id' render={props => <Game {...props} />} />","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render( \n    <React.StrictMode >\n    <App / >\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}